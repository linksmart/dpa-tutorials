{
  "aggregation": {
    "name": "average_temperature",
    "statement": "select avg(intResult) from Observation(datastream.id.toString() like 'tmp%').win:time(30 sec) "
  },
  "query": {
    "name": "full_alert",
    "statement": "select datastream.thing.id from Observation(datastream.id.toString() like 'fill%' and intResult> 0)"
  },
  "post-process": {
    "name": "weight",
    "statement": "select datastream.thing.id as binID, intResult*10000 as weight  from Observation(datastream.id.toString() like 'fill%')"
  },
  "fusion": {
    "name": "stinky_bin",
    "statement": "select 'bin1' as binID  from Observation((datastream.id.toString() = 'tmp1' and  intResult> 10 ) or ( datastream.id.toString() = 'fill1' and intResult> 0 )).win:time(1 sec)  having count(*)=2"
  },
  "broker_route": {
    "name": "stinky_bin_route",
    "statement": "select 'bin2' as binID  from Observation((datastream.id.toString() = 'tmp2' and  intResult> 10 ) or ( datastream.id.toString() = 'fill2' and intResult> 0 )).win:time(1 sec)  having count(*)=2",
    "scope": [
      "city"
    ]
  },
    "broker_route_dummy_to_update": {
    "name": "stinky_bin_route_dummy_to_update",
    "statement": "select 'bin2' as binID  from Observation((datastream.id.toString() = 'tmp2' and  intResult> 10 ) or ( datastream.id.toString() = 'fill2' and intResult> 0 )).win:time(1 sec)  having count(*)=2"
  },
  "topic_broker_route": {
    "name": "stinky_bin_route2",
    "statement": "select 'bin3' as binID  from Observation((datastream.id.toString() = 'tmp3' and  intResult> 10 ) or ( datastream.id.toString() = 'fill3' and intResult> 0 )).win:time(1 sec)  having count(*)=2",
    "scope": [
      "city"
    ],
    "output": [
      "LS/my/topic"
    ]
  },
  "topic_broker_route_dummy_to_update": {
    "name": "stinky_bin_route2_dummy_to_update",
    "statement": "select 'bin3' as binID  from Observation((datastream.id.toString() = 'tmp3' and  intResult> 10 ) or ( datastream.id.toString() = 'fill3' and intResult> 0 )).win:time(1 sec)  having count(*)=2"
  },
  "payload_translate": {
    "name": "stinky_bin_route_translate",
    "statement": "select 'bin4' as binID  from Observation((datastream.id.toString() = 'tmp4' and  intResult> 10 ) or ( datastream.id.toString() = 'fill4' and intResult> 0 )).win:time(1 sec)  having count(*)=2",
    "scope": [
      "city"
    ],
    "output": [
      "LS/DPA/1/SenML/10/Event/stinky_bin_route_translate"
    ],
    "resultType": "SenML"
  },
  "payload_translate_dummy_to_update": {
    "name": "stinky_bin_route_translate_dummy_to_update",
    "statement": "select 'bin4' as binID  from Observation((datastream.id.toString() = 'tmp4' and  intResult> 10 ) or ( datastream.id.toString() = 'fill4' and intResult> 0 )).win:time(1 sec)  having count(*)=2"
  },
  "payload_transform": {
    "name": "stinky_bin_route_transform",
    "statement": "select 'bin5' as binID  from Observation((datastream.id.toString() = 'tmp5' and  intResult> 10 ) or ( datastream.id.toString() = 'fill5' and intResult> 0 )).win:time(1 sec)  having count(*)=2",
    "scope": [
      "city"
    ],
    "output": [
      "LS/DPA/1/RAW/0/RAW/stinky_bin"
    ],
    "resultType": "none"
  },
  "payload_transform_dummy_to_update": {
    "name": "stinky_bin_route_transform_dummy_to_update",
    "statement": "select 'bin5' as binID  from Observation((datastream.id.toString() = 'tmp5' and  intResult> 10 ) or ( datastream.id.toString() = 'fill5' and intResult> 0 )).win:time(1 sec)  having count(*)=2"
  },
  "protocol_translate": {
    "name": "protocol_translate",
    "statement": "select event from Observation as event",
    "scope": [
      "appbackend:post2pub"
    ],
    "output": [
      "routed"
    ],
    "publisher": "REST_POST"
  }
}